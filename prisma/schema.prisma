// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  hash        String
  pseudo      String    @unique
  avatarUrl   String?
  birthdate   DateTime?
  createdAt   DateTime  @default(now())
  fakeAccount Boolean   @default(false)

  // Relations
  friends                String[]          @default([])
  sentFriendRequests     FriendRequest[]   @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]   @relation("ReceivedFriendRequests")
  sentMessages           Message[]         @relation("SentMessages")
  receivedMessages       Message[]         @relation("ReceivedMessages")
  ownedGroups            Group[]           @relation("OwnedGroups")
  groupMemberships       GroupMembership[]
  uploadedFiles          File[]            @relation("UploadedFiles")
  groupRequests          GroupRequest[]
}

model FriendRequest {
  id         String              @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())

  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  receiverId String?
  groupId    String?
  createdAt  DateTime @default(now())

  // Relations
  sender   User    @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User?   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  group    Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  file     File?   @relation(fields: [fileId], references: [id]) // Référence vers le fichier
  fileId   String? @unique // Référence vers un fichier
}

model Group {
  id        String   @id @default(uuid())
  name      String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  ownerId   String

  // Relations
  owner         User              @relation("OwnedGroups", fields: [ownerId], references: [id], onDelete: Cascade)
  members       GroupMembership[]
  messages      Message[]
  groupRequests GroupRequest[]
}

model GroupRequest {
  id        String             @id @default(uuid())
  groupId   String
  userId    String
  status    GroupRequestStatus @default(PENDING)
  createdAt DateTime           @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model GroupMembership {
  id       String    @id @default(uuid())
  groupId  String
  userId   String
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model File {
  id           String   @id @default(uuid())
  url          String
  uploaderId   String
  messageId    String?  @unique
  fileType     FileType @default(IMAGE)
  createdAt    DateTime @default(now())
  cloudinaryId String?

  // Relations
  uploadedBy User @relation("UploadedFiles", fields: [uploaderId], references: [id], onDelete: Cascade)

  Message Message?
}

enum FileType {
  AVATAR
  IMAGE
  VIDEO
  DOCUMENT
}

enum Status {
  ONLINE
  OCCUPIED
  OFFLINE
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum GroupRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum GroupRole {
  MEMBER
  ADMIN
}
